--------------------------------------------------------------------------------
1.

Error correcting codes are designed to be tolerant against random changes
during transmission.  If the ECC encoding is permuted randomly by an
encryption function, it won't work correctly.

Even more importantly, decryption needs an error free input to work
effectively.  If a system tries to decrypt an erroneous ciphertext, the
resulting pre-ECC plaintext will be meaningless.

Therefore you should encrypt and then apply the ECC.

--------------------------------------------------------------------------------
2.

For any bit X[i], we have 

P(X[i] == 0) = p = 1/2

so

P(X[i] xor Y[i] == 0)
= P(X[i] == 0 and Y[i] == 0 or X[i] == 1 and Y[i] == 1)
= P(X[i] == 0 and Y[i] == 0) + P(X[i] == 1 and Y[i] == 1)
= p*P(Y[i]==0) + (1-p)*P(Y[i]==1)

Letting q(i, ...) = q = P(Y[i]==0)
= pq + (1-p)*(1-q)
= pq + 1 - q - p + qp
= 1 + q - q - 1/2
= 1/2


Since i was arbitrary, the result Z= X ^ Y is a uniform distribution over
{0,1}^n

So 0^n occurs with probability 1/2^n

--------------------------------------------------------------------------------
3.

Since (E1,D1) is deterministic, it cannot offer many time semantic security.
However, it can offer one time semantic security. Since the key space is
smaller than the message space, the cipher cannot be perfectly secure.

On the other hand, (E2,D2) can be both one time semantically secure and
perfectly secure since the key space and message space are the same size.

--------------------------------------------------------------------------------
4.

CBC mode requires the block cipher be reversible, so it must be a PRP.  On
the other hand, CTR mode can be configured to only use the encryption directly
of the block cipher, so it will work with just a PRF.

--------------------------------------------------------------------------------
5.

The function G(k)[m] with m in {0,1} is a secure PRF whenever G is a secure
PRG.  The other options are insecure because they are clearly distinguishable
from random (change a single bit in the m and see what happens to the
output.)


--------------------------------------------------------------------------------
6.

If the same key is used to encrypt 2^32 messages, we need to have at least
(2^32)^2 or 2^64 distinct, uniformly sampled nonces in order to have a <1/2
probability of not having a nonce collision.  So the nonce space should be
2^128.

--------------------------------------------------------------------------------
7.

Since the nonces will not collide until the entire nonce space has been used,
it is acceptable to use a nonce space the same size as the number of messages
that are expected to be sent, or just 2^32 nonces.

--------------------------------------------------------------------------------
8.

That a MAC is secure implies that an attacker cannot create any forgery. This
implies the weaker version of security that says an attacker cannot forge the
message S(k,m1) given m0, m1, and S(k,m0).

--------------------------------------------------------------------------------
9.

Collision Resistance implies that it is difficult to find any

m0, m1 such that H(m0) = H(m1)

--------------------------------------------------------------------------------
10.

Authenticated Encryption implies many weaker security definitions.  For
instance, it implies:

> Given m and E(k,m) it is difficult to find k (weak semantic security)

> (E,D) provides chosen-ciphertext security.

AE does not imply
> Given c=E(k,m) for some k,m, the attacker cannot find k',m' such that
> c=E(k',m').  That would imply some notion of "collision resistance" between
> messages encrypted with different keys. 

> Given k,m and E(k,m) the attacker cannot create a valid encryption of m+1
  under key k. (AE does not imply anything if the attacker gets k)

--------------------------------------------------------------------------------
11.

The following are true of DH key exchange:
> The basic protocol enables key exchange secure against eavesdropping, but is
> insecure against active adversaries that can inject and modify messages.

> The protocol provides security against eavesdropping in any finite group in
> which the Hash Diffie-Hellman (HDH) assumption holds.

The following are not true of DH:
> The protocol is based on the concept of a trapdoor function.  (Even though
> the protocol relies on a one-way function, there is no trapdoor to the
> discrete log problem.)

> As with RSA, the protocol only provides eavesdropping security in the group
> Z*N where N is an RSA modulus. (RSA provides eavesdropping security in other
> groups such as the elliptic curve groups, as does DH.)

--------------------------------------------------------------------------------
12.

Each party Ai has access to the values ai and of course Xi = g^ai and Yi =
Xi^b = g^bai.  Ai can therefore compute g^b as
(g^bai) ^ 1/ai = Xi^b ^ 1/ai = Yi^(1/ai)

--------------------------------------------------------------------------------
13.

For any prime p, totient(p) = p-1, so d is the inverse of e in the group
Z*_{p-1}, or

d <- e^-1 (mod p-1)

--------------------------------------------------------------------------------
