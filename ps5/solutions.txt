--------------------------------------------------------------------------------
1.

First, Alice contacts the TTP.  At minimum, she must receive from the server
the shared key encrypted with her own private key, or E(k_a, k_abc).

She must also not send the shared key in the clear.  Therefore the TTP should
send Alice
_
E(k_a, k_abc), ticket1 <- E(k_b, k_abc), ticket2 <- E(k_c, k_abc)
Alice sends ticket1 to Bob and ticket2 to Carol
_

--------------------------------------------------------------------------------
2.

> f := g^(x+y)
This function _is not difficult to compute_. Specifically, an attacker can
compute f by simply computing g^x * g^y = g^(x+y).

> f := g^(x-y)
This function _is not difficult to compute_. Specifically, an attacker can
compute f by simply computing g^x/g^y = g^(x-y).

> f := g^(xy + x + y + 1)
This function _is difficult to compute_.  Suppose an attacker can compute f.
He could then compute DH with the equation
DH(g^x, g^y) = g^xy = f(g^x, g^y)/(g * g^x * g^y)

> f := g^2xy
This function _is difficult to compute_.  Suppose an attacker can compute f.
He could then compute DH with the equation

DH(g^x, g^y) = g^xy = sqrt_p(f(g^x, g^y))
Where sqrt is the square root modulo p, which is "easy" for a finite cyclic
group Z_p

--------------------------------------------------------------------------------
3.

Since Bob sends Alice g^(1/b), she has no way of computing g^ab.  The secret
key must therefore be g^(a/b).  They generate this key as B^a and A^(1/b).  In
other words:

_secret = g^(a/b).  Alice computes the secret as B^a and Bob computes A^(1/b).

--------------------------------------------------------------------------------
4.

The additional step _does not_ prevent the MitM attack.  An attacker can
intercept the initial message from Alice to Bob, and replace pk with pk'.  He
sends pk' to Bob, who responds with (E(pk', x), S(x, E(pk', x)).  The attacker
then decrypts E(pk', x) to determine x, computes E(pk, x), and sends
(E(pk,x),S(x,E(pk,x)) to Alice.  Alice sees that the MAC is correct and
communicates insecurely with Bob.

--------------------------------------------------------------------------------
5.

Using some simple python, we see that (a,b) = (10,-3)

In Z_23, 7a + 23b = 7a and 1 = 1.
So 7a = or _a^-1 = 10_

--------------------------------------------------------------------------------
6.

3x + 2 = 7
3x = 5

x = 5 * (3^-1) = 5 * 13 = 65 mod 19
= _8_

--------------------------------------------------------------------------------
7.

We aim to find |Z*_35|
Since 35 = 7*5, |Z*_35| = 35 - 7 - 5 + 1 = _24_

--------------------------------------------------------------------------------
8.

We aim to find 2^(10001) mod 11
Femat's theorem says that x^(p-1) = 1 in Zp.

So consider the ring Z_11.
x^(10) = 1 in Z_11

We notice that 2^(10001) = 2*2^(10000) = 2*((((2^10)^10)^10)^10) = 2*1 =
_2_ in Z_11

--------------------------------------------------------------------------------
9.

We aim to compute 2^245 mod 35

Since 35 = 7*5, phi(35) = 24.

2^245 = 2^5 * 2^240 = 2^5 * (2^24)^10

From Euler's theorem, we see that 2^24 = 2^phi(35) = 1 in Z_35

So we have 2^245 = 2^5 * 1 =
_35_ in Z_35

--------------------------------------------------------------------------------
10.

We aim to compute ord_35(2)
By Lagranges theorem, ord_5(2) | 4 and ord_7(2) | 6.

So ord_35(2) | 24.
Clearly ord_2(35) > 5, so we try 6, 8, and 12.

2^6 = 64 = 29 in Z*_35
2^8 = 256 = 11 in Z*_35
2^12 = 4096 = 1 in Z*_35

So ord_2(35) = _12_

--------------------------------------------------------------------------------
11.



--------------------------------------------------------------------------------
12.


--------------------------------------------------------------------------------
13.


--------------------------------------------------------------------------------
14.


--------------------------------------------------------------------------------
15.


--------------------------------------------------------------------------------
